To solve the given partial differential equation using MATLAB, we can use the finite difference method. Let us define the domain of interest, the time range, and the spatial grid as follows:

% Define the domain and time range
x0 = 0; xf = 1;
t0 = 0; tf = 1;

% Define the number of grid points
N = 101; % Number of grid points in x direction
M = 101; % Number of grid points in t direction

% Define the grid spacing
dx = (xf - x0)/(N-1);
dt = (tf - t0)/(M-1);

% Define the grid
x = x0:dx:xf;
t = t0:dt:tf;

Next, we can define the initial condition and boundary conditions:

% Define the initial condition
u0 = sin(pi*x);

% Define the boundary conditions
u_left = 0;
u_right = 0;

We can now set up the finite difference scheme for the given partial differential equation. Let us use a central difference approximation for the second derivative in space and the second derivative in time. For the third and fourth derivatives in space, we can use a fourth-order accurate approximation. This gives us the following numerical scheme:

for j = 1:M-2 % Time loop
% Set the boundary conditions
u(j,1) = u_left; % Left boundary
u(j,N) = u_right; % Right boundary

% Calculate the second derivative in time
d2udt2 = (u(j+1,2:N-1) - 2*u(j,2:N-1) + u(j-1,2:N-1))/dt^2;

% Calculate the second derivative in space
d2udx2 = (u(j,3:N) - 2*u(j,2:N-1) + u(j,1:N-2))/dx^2;

% Calculate the third derivative in space
d3udx3 = (-u(j,5:N) + 8*u(j,4:N-1) - 8*u(j,2:N-3) + u(j,1:N-4))/(8*dx^3);

% Calculate the fourth derivative in space
d4udx4 = (u(j,5:N) - 4*u(j,4:N-1) + 6*u(j,3:N-2) - 4*u(j,2:N-3) + u(j,1:N-4))/(dx^4);

% Update the solution using the given equation
u(j+2,2:N-1) = b*(dudx).^2 + 4*gamma*d3udx3 - gamma*u(j,2:N-1).*d4udx4 - d2udt2;

end

Finally, we can plot the solution at different time steps:

% Plot the solution at different time steps
figure
for j = 1:10:M
plot(x,u(j,:))
xlabel('x')
ylabel('u')
title(['t = ',num2str(t(j))])
drawnow
end

This code will solve the given partial differential equation using the finite difference method and display the solution at different time steps. Note that the values of the parameters b and gamma should be specified before running the code.